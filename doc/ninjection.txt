==============================================================================
*INTRODUCTION*																							 *ninjection.nvim*

Ninjection is a plugin designed to improve editing injected language text.
Its goal is to provide a seamless, first-class editing experience for injected
code with full support for LSPs, code-snippets, completions, formatting, etc.

Ninjection utilizes Treesitter's language parsing functionality to identify
nodes that contain an injected language, and appropriately designate that
language. It provides functions to create a new buffer for that language,
and to attach an appropriate LSP to that buffer.

While Ninjection was written primarily to edit injected languages in Nix files,
it should be easily extensible to other languages. Ninjection provides
configuration options to modify language parsing queries, LSP mappings,
window styles, and formatting.

Getting started with ninjection:
  1. Run `:checkhealth ninjection` to check that all dependencies are present
	and that your configuration is valid.
  2. Move the cursor to an injected code block:
	`:Ninjection select` - should highlight the entire injected code block.
	`:Ninjection edit` - should open a floating window with the injected text 
	and attach the appropriate LSP. 
	`:Ninjection replace` - should apply any changes in the editing buffer to 
	the original buffer. 
	You can also test functionality with: 
	`:lua require("ninjection").select()`
	`:lua require("ninjection").edit()`
	`:lua require("ninjection").replace()`
  3. Ninjection provides keymap plugs for you to map keybindings 
	of your choosing:
	`<Plug>(NinjectionEdit)`
	`<Plug>(NinjectionReplace)`
	`<Plug>(NinjectionSelect)`
     

==============================================================================
ninjection-command USER COMMAND
:Ninjection <subcommand?>

	Subcommands:
		edit  	=> |ninjection.edit|
		replace => |ninjection.replace|
		select  => |ninjection.select|

==============================================================================
"ninjection"

The ninjection module contains the three primary ninjection functions:
|select()|, |edit()|, and |replace()|.
Type ~
`(Ninjection.Config)`
                                                           *ninjection.select()*

Identifies and selects injected text in visual mode.

Return ~
`(nil)`

                                                             *ninjection.edit()*

Detects injected languages at the cursor position and begins editing supported
languages according to configured preferences. `ninjection.edit()` creates a
child buffer with an `NJChild` object that stores config information for itself
and information to replace text in the parent buffer. It also appends the child
buffer handle to an `NJParent` object in the parent buffer.

Return ~
`(nil)`

                                                          *ninjection.replace()*

Replaces the original injected language text in the parent buffer
with the current buffer text. This state is stored by in the `vim.b.ninjection`
table as an `NJParent` table in the child, and `NJChild` table indexed by the
child bufnr in the parent. This relationship is validated before replacing.

Return ~
`(nil)`


==============================================================================
"ninjection.config"

The config module contains the default ninjection configuration table and
functions to merge user config options and reload config changes.

NOTE: width/height col/row default values are dynamically set to:
80% of vim.o.columns/vim.o.rows and offset for a centered window.
`{
`  auto_format = true,
`  debug = true,
`  editor_style = "floating",
`  format_cmd = "_G.format_with_conform()",
`  inj_lang_queries = {
`    nix = '            (
`              (comment) @injection.language
`              .
`              [
`                (indented_string_expression
`                  (string_fragment) @injection.content)
`                (string_expression
`                  (string_fragment) @injection.content)
`              ]
`              (#gsub! @injection.language "#%s*([%w%p]+)%s*" "%1")
`              (#set! injection.combined)
`            )
`          '
`  },
`  injected_comment_lines = 1,
`  lsp_map = {
`    bash = "bashls",
`    c = "clangd",
`    cpp = "clangd",
`    javascript = "ts_ls",
`    json = "jsonls",
`    lua = "lua_ls",
`    python = "ruff",
`    rust = "rust_analyzer",
`    sh = "bashls",
`    typescript = "ts_ls",
`    yaml = "yamlls",
`    zig = "zls"
`  },
`  preserve_indents = true,
`  register = "z",
`  win_config = {
`    border = "single",
`    col = 8,
`    height = 19,
`    relative = "editor",
`    row = 2,
`    style = "minimal",
`    width = 64,
`    zindex = 25
`  }
`}

                                                               *config.reload()*

Reloads all ninjection modules to flush caches and apply a new config.

Return ~
`(nil)`


==============================================================================
"ninjection.types"

The types module contains all ninjection specific type definitions.


                                                                   *EditorStyle*

Supported window styles for buffer editor:
`"cur_win" | "floating" | "v_split" | "h_split"`


Modified from `nvim-lspconfig/lua/lspconfig/configs.lua` because I can't
find a reference to: `vim.api.keyset.create_user_command.command_args`

                                                         *Ninjection.Subcommand*
Class ~
{Ninjection.Subcommand}
Implemented by `plugin/ninjection.lua` for user commands.

{impl} `(fun())`
{complete} `(optional)` `(fun(arg_lead: string): string[])`

                                                            *Ninjection.CmdOpts*
Class ~
{Ninjection.CmdOpts}
Implemented by `plugin/ninjection.lua` for user commands.

{args} `(string)` - The entire argument string as typed.
{fargs} `(string[])` - Command arguments as an array of strings.
{bang} `(optional)` `(boolean)` - Bang (!) flag.
{line1} `(optional)` `(number)` - Starting line number for optional range.
{line2} `(optional)` `(number)` - Ending line number for optional range.
{count} `(optional)` `(number)` - Optional count.

                                                             *Ninjection.Config*
Class ~
{Ninjection.Config}
Implemented by `ninjection/config.lua` for default and user configs.

{preserve_indents} `(optional)` `(boolean)` - Preserve indents from the parent buffer.
This option should be used in conjunction with `auto_format` because this
will re-apply indents that `auto_format` normally removes. If you don't remove
indents, then enabling this will increas the original indenation.

{auto_format} `(optional)` `(boolean)` - Auto format the new child buffer.
{format_cmd} `(optional)` `(string)` - Command for `auto_format`.
{injected_comment_lines} `(optional)` `(integer)` - The offset for comment delimiting
lines. For example, offsetting 1 line would function with this format:

`# injected_lang
`''
`	injected content
`'';

Offsetting 0 lines would function with this format:

`# injected_lang
`''injected content
`more injected content
`end content'';

{register} `(optional)` `(string)` - Register to use to copy injected content.
{debug} `(optional)` `(boolean)` - Output debug messages.

{editor_style} `(optional)` "`(cur_win)`" | "floating" | "v_split" | "h_split"
Window style to use for the injected context editor.

{win_config} `(optional)` `(vim.api.keyset.win_config)`
Window configuration parameters.

{inj_lang_queries} `(optional)` `(table<string,string>)` - Contains per-language string
literals for Treesitter queries to Identify injected content nodes.

{lsp_map} `(optional)` `(table<string,string>)` - LSP associated with the injected
languages These keys must match the language comment used to identify
injected languages, and the value must match the LSP configured in your
lspconfig.

                                                                       *NJRange*
Class ~
{NJRange}
Store cursor position coordinates.

{s_row} `(integer)`
{s_col} `(integer)`
{e_row} `(integer)`
{e_col} `(integer)`

                                                                   *NJNodeTable*
Class ~
{NJNodeTable}
Store a Treesitter node and its associated coordinates.

{node} `(TSNode)`
{range} `(NJRange)`

                                                                     *NJIndents*
Class ~
{NJIndents}
Store indents for a text buffer.

{t_indent} `(number)`
{b_indent} `(number)`
{l_indent} `(number)`

                                                                      *NJParent*
Store associated child bufnrs.
Class ~
{NJParent}
{children} `(integer[])`

                                                                       *NJChild*
Class ~
{NJChild}
Store associated parent buffer information.

{bufnr} `(integer)`
{root_dir} `(string)`
{p_bufnr} `(integer)`
{p_indents} `(NJIndents)`
{p_range} `(NJRange)`

                                                                   *NJLspStatus*
Class ~
{NJLspStatus}
Store LSP status and associated client ID.

{status} `(string)` - The LSP startup status. Possible values: `"unmapped"`,
`"unconfigured"`, `"unavailable"`, `"no-exec"`, `"unsupported"`, `"failed_start"`,
`"started"`

{client_id} `(integer)` - The client ID of the started LSP, -1 on failure

                                                              *lspconfig.Config*
Class ~
{lspconfig.Config} : vim.lsp.ClientConfig
Annotation for lspconfig from `nvim-lspconfig/lua/lspconfig/configs.lua`

{enabled} `(optional)` `(boolean)`
{single_file_support} `(optional)` `(boolean)`
{silent} `(optional)` `(boolean)`
{filetypes} `(optional)` `(string[])`
{filetype} `(optional)` `(string)`
{on_new_config} `(optional)` `(fun(new_config: lspconfig.Config?, new_root_dir: string))`
{autostart} `(optional)` `(boolean)`
{package} _`(on_attach?)` fun(client: vim.lsp.Client, bufnr: integer)
{root_dir} `(optional)` `(string|fun(filename: string, bufnr: number))`
{commands} `(optional)` `(table<string, ({[1]:string|vim.api.keyset.user_command})>)`

==============================================================================
"ninjection.health"

The health module contains functions to validate configuration parameters
and check for required dependencies.

                                           *ninjection.health.validate_config()*

	Validates either a provided configuration table or the
	current configuration.

Parameters ~
{cfg} `(optional)` `(Ninjection.Config)`

Return ~
`(boolean)` is_valid, string? err


==============================================================================
"ninjection.parse"

The parse module contains all treesitter related functions for ninjection.

Type ~
`(Ninjection.Config)`
                                                  *ninjection.parse.qet_query()*

Retrieves a parsed query from Treesitter given a language and pattern.

Parameters ~
{lang} `(optional)` `(string?)` - Default: `"nix"` - language grammar to parse with.

Return ~
`(vim.treesitter.Query)` `(optional)` parsed_query
parsed Treesitter Query object

                                                   *ninjection.parse.get_root()*

Parses the root tree for a language in a buffer.

Parameters ~
{bufnr} `(integer)` - Handle for buffer to parse.
{lang} `(optional)` `(string)`  - Default: `"nix"` - language to parse with.

Return ~
`(TSNode)` `(optional)` root
Root node of the TSTree for the language.

                                             *ninjection.parse.get_node_table()*

Identifies the injected language node at the current cursor position
with start and ending coordinates.

Parameters ~
{bufnr} `(integer)` - The buffer handle to query in.

Return ~
`(NJNodeTable)` `(optional)` table, string? err
Returns a table containing:
 - node: `TSNode` - the Treesitter node element (see :h TSNode).
 - range: `NJRange` - row/col ranges for the node.
 NOTE: Coordinates may not match the actual text locations
 (see: `ninjection.parse.get_visual_range()` for this).
                                               *ninjection.parse.get_inj_lang()*

Parse an injected content node for an associated language comment.

Parameters ~
{bufnr} `(integer)` - Handle for the buffer to query in.
injections in.

Return ~
`(string)` `(optional)` inj_lang , string? err - Injected language identified.

                                           *ninjection.parse.get_visual_range()*

Gets an adjusted "visual" range for a node by approximating the
range of text that is actually seen (as returned by get_node_text).
This makes an opinionated assumption about formatting that expects:

	`assigment = # injected_lang_comment
	`''
	`	 injected.content
	`'';

	The '' and ''; characters are not important, but the dedicated lines for
comment delimiters and the language comment above that block are important.

Parameters ~
{node} `(TSNode)` - The Treesitter node to select in.
{bufnr} `(integer)` - Handle for the buffer to work in.

Return ~
`(NJRange)` `(optional)` vs_range, string? err - Range of text selected.


==============================================================================
"ninjection.buffer"

The buffer module contains helper functions utilized by the main ninjection
module for creating and editing injected text in buffers.

                                               *ninjection.buffer.get_indents()*

Finds whitespace indents (top, bottom, left) in the provided buffer.

Parameters ~
{bufnr} `(integer)` - Buffer handle.

Return ~
`(NJIndents)` `(optional)` indents, string? err
Returns, on success, a table containing:
 - `t_indent`: number of blank lines at the top.
 - `b_indent`: number of blank lines at the bottom.
 - `l_indent`: minimum number of leading spaces on nonempty lines.

                                           *ninjection.buffer.restore_indents()*

Restores the recorded whitespace indents (top, bottom, and left indent)
for the provided text.

Parameters ~
{text} `(string|table<integer,string>)` The text to restore indents to.
Can be either a string (with newline separators) or a table of lines.
{indents} `(NJIndents)` Table with indent values for t, b, l

Return ~
`(string[])` `(optional)` restored_lines, string? err
Lines with the indents restored.

                                              *ninjection.buffer.create_child()*

Creates a child buffer to edit injected language text.

Parameters ~
{p_bufnr} `(integer)` - Buffer handle for parent buffer.
{p_name} `(string)` - Name for parent buffer.
{p_range} `(NJRange)` - Text range for the injected text.
{root_dir} `(string)` - Root directory for project, or cwd.
{text} `(string)` - Text to populate the child buffer with.
{lang} `(string)` - Language to configure buffer for.

Return ~
`({ bufnr: integer?, win: integer?, indents: NJIndents })` c_table, string? err
                                             *ninjection.buffer.set_child_cur()*

Sets the child cursor to the same relative position as in the parent window.

Parameters ~
{c_win} `(integer)` Handle for child window to set the cursor in.
{p_cursor} `(integer[])` Parent cursor pos.
{s_row} `(integer)` Starting row from the parent to offset the child cursor by.
{indents} `(NJIndents?)` Indents to calculate additional offsets with.

Return ~
`(string)` `(optional)` err

                                                 *ninjection.buffer.start_lsp()*

Starts an appropriate LSP for the provided language.

Parameters ~
{lang} `(string)` - The filetype of the injected language (e.g., "lua", "python").
{root_dir} `(string)` - The root directory for the buffer.

Return ~
`(NJLspStatus)` `(optional)` result, string? err - The LSP status.


 vim:tw=78:ts=8:noet:ft=help:norl: