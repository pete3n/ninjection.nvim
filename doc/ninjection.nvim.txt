M.setup()                                                              *M.setup*


M.select()                                                            *M.select*
     Function: Identify and select injected content text in visual mode.

    Returns: ~
        (nil|string)  Error string, if applicable.


M.edit()                                                                *M.edit*
     Function: Detects injected language at the cursor position and begins
     editing supported languages according to configured preferences.
     Creates a child buffer with an NJChild object that stores config information
     for itself and information to replace text in the parent buffer. It also
     appends the child buffer handle to an NJParent object in the parent buffer.

    Returns: ~
        (nil|string)  Erring, if applicable.


M.replace()                                                          *M.replace*
     Function: Replace the original injected language text in the parent buffer
     with the current buffer text. This state is stored by in the vim.b.ninjection
     table as an NJParent table in the child, and NJChild table indexed by the
     child bufnr in the parent. This relationship is validated before replacing.

    Returns: ~
        (nil|string)  Returns err string, if applicable


ninjection.util                                                *ninjection.util*


M.set_config()                                                    *M.set_config*


M.get_indents({bufnr})                                           *M.get_indents*
    Function: Find whitespace indents (top, bottom, left) in the provided buffer.

    Parameters: ~
        {bufnr}  (integer)  Buffer handle

    Returns: ~
        (NJIndents|nil)  Stores indentation values
        (nil|string)     Error string, if applicable
                          Return, on success, A table containing:
                           - t_indent: number of blank lines at the top.
                           - b_indent: number of blank lines at the bottom.
                           - l_indent: minimum number of leading spaces on nonempty lines.
                          Return, on failure, nil and error string, if applicable


M.restore_indents()                                          *M.restore_indents*
     Restores the recorded whitespace indents (top, bottom, and left indent)
     to a block of text.

     @param text string|table The text for which indents should be restored.
     Can be either a string (with newline separators) or a table of lines.
     @param indents NJIndents  Table with indent values for t, b, l
     @return table|nil restored_lines  A table of lines with the indents restored.
     @return nil|string err  Error message, if applicable


M.start_lsp()                                                      *M.start_lsp*
     Start an appropriate LSP for the provided language
     @param lang string The filetype of the injected language (e.g., "lua", "python").
     @param root_dir string The root directory for the buffer.
     @return NJLspStatus|nil result  A table containing the LSP status and client_id
     Return: "unmapped", "unconfigured", "unavailable", "no-exec", "unsupported",
     "failed_start", "started" and client_id if available
     @return nil|string err Error message, if applicable


M.check()                                                              *M.check*


ninjection.treesitter                                    *ninjection.treesitter*
     Treesitter helper functions for ninjection


M.set_config()                                                    *M.set_config*


M.get_query({query}, {lang?})                                      *M.get_query*
     Function: Get a parsed query from Treesitter given a language and pattern.

    Parameters: ~
        {query}  (string)  Lua-literal string for Treesitter query.
        {lang?}  (string)  Default: "nix", language grammar to parse with.

    Returns: ~
        (vim.treesitter.Query|nil)  The parsed Treesitter Query object
        (nil|string)                Error string, if applicable


M.get_root({bufnr}, {lang?})                                        *M.get_root*
     Function: Parses the root tree for a language in a buffer.


    Parameters: ~
        {bufnr}  (integer)  Handle for buffer to parse.
        {lang?}  (string)   Default: "nix" language to parse with.

    Returns: ~
        (TSNode|nil)  root node of the TSTree for the language.
        (nil|string)  Error string, if applicable.


M.get_node_table({query}, {lang?})                            *M.get_node_table*
     Function: Identify the injected language node at the current cursor position
     with start and ending coordinates.


    Parameters: ~
        {query}  (string)  Pattern to identify an injected lang.
        {lang?}  (string)  Default: "nix" language grammar to use for parsing.

    Returns: ~
        (NJNodeTable|nil)   Return: On success, a table containing:
                            node: TSNode - the Treesitter node element (see :h TSNode).
                            range: NJRange - s_col, s_row, e_col, e_row, integer coordinates for node.
                            NOTE: Coordinates may not match the actual text locations (see:
                            get_visual_range() for this).
        (nil|string)       Error string, if applicable


                                                                *M.get_inj_lang*
M.get_inj_lang({query}, {bufnr}, {file_lang?})
     Function: Parse an injected content node for an associated language comment.


    Parameters: ~
        {query}       (string)   Query to identify an injected content node.
        {bufnr}       (integer)  Handle for the buffer to query in.
        {file_lang?}  (string)   Default: "nix". Parent file language to find injections in.

    Returns: ~
        (string|nil)  Injected language identified.
        (nil|string)  Error string, if applicable.


M.get_visual_range()                                        *M.get_visual_range*
     Function: Gets an adjusted "visual" range for a node by approximating the
     range of text that is actually seen (as returned by get_node_text).
     This makes an opinionated assumption about formatting that expects:
    	assigment = # injected_lang_comment
    	''
    		injected.content
    	'';
    	The '' and ''; characters are not important, but the dedicated lines for
     comment delimiters and the language comment above that block are important.

     @param node TSNode The Treesitter node to select in.
     @param bufnr integer Handle for the buffer to work in.
     @return NJRange|nil vs_range Range of text selected.
     @return nil|string err Error string, if applicable.


ninjection.util                                                *ninjection.util*


M.set_config()                                                    *M.set_config*


M.get_indents({bufnr})                                           *M.get_indents*
    Function: Find whitespace indents (top, bottom, left) in the provided buffer.

    Parameters: ~
        {bufnr}  (integer)  Buffer handle

    Returns: ~
        (NJIndents|nil)  Stores indentation values
        (nil|string)     Error string, if applicable
                          Return, on success, A table containing:
                           - t_indent: number of blank lines at the top.
                           - b_indent: number of blank lines at the bottom.
                           - l_indent: minimum number of leading spaces on nonempty lines.
                          Return, on failure, nil and error string, if applicable


M.restore_indents()                                          *M.restore_indents*
     Restores the recorded whitespace indents (top, bottom, and left indent)
     to a block of text.

     @param text string|table The text for which indents should be restored.
     Can be either a string (with newline separators) or a table of lines.
     @param indents NJIndents  Table with indent values for t, b, l
     @return table|nil restored_lines  A table of lines with the indents restored.
     @return nil|string err  Error message, if applicable


M.start_lsp()                                                      *M.start_lsp*
     Start an appropriate LSP for the provided language
     @param lang string The filetype of the injected language (e.g., "lua", "python").
     @param root_dir string The root directory for the buffer.
     @return NJLspStatus|nil result  A table containing the LSP status and client_id
     Return: "unmapped", "unconfigured", "unavailable", "no-exec", "unsupported",
     "failed_start", "started" and client_id if available
     @return nil|string err Error message, if applicable


vim:tw=78:ts=8:noet:ft=help:norl:
