---@module "ninjection.types"
---@brief
--- The types module contains all ninjection specific type definitions.
---

---@meta
---@tag EditorStyle
---@alias EditorStyle "cur_win" | "floating" | "v_split" | "h_split"
---@brief
--- Supported window styles for buffer editor:
--- `"cur_win" | "floating" | "v_split" | "h_split"`
---
---@alias lspconfig.Config.command {[1]:string|vim.api.keyset.user_command}
---@brief
--- Modified from `nvim-lspconfig/lua/lspconfig/configs.lua` because I can't
--- find a reference to: `vim.api.keyset.create_user_command.command_args`
---
---@tag Ninjection.Subcommand
---@class Ninjection.Subcommand
---@brief Implemented by `plugin/ninjection.lua` for user commands.
---
---@field impl fun()
---@field complete? fun(arg_lead: string): string[]
---
---@tag Ninjection.CmdOpts
---@class Ninjection.CmdOpts
---@brief Implemented by `plugin/ninjection.lua` for user commands.
---
---@field args string - The entire argument string as typed.
---@field fargs string[] - Command arguments as an array of strings.
---@field bang? boolean - Bang (!) flag.
---@field line1? number - Starting line number for optional range.
---@field line2? number - Ending line number for optional range.
---@field count? number - Optional count.
---
---@tag Ninjection.Config
---@class Ninjection.Config
---@brief Implemented by `ninjection/config.lua` for default and user configs.
---
---@field file_lang? string - File type to search for injected languages in.
--- Must have a matching entry in `inj_lang_queries`.
--- Currently only supports nix, but could be extended.
---
---@field preserve_indents? boolean - Preserve indents from the parent buffer.
--- This option should be used in conjunction with `auto_format` because this
--- will re-apply indents that `auto_format` normally removes. If you don't remove
--- indents, then enabling this will increas the original indenation.
---
---@field auto_format? boolean - Auto format the new child buffer.
---@field format_cmd? string - Command for `auto_format`.
---@field injected_comment_lines? integer - The offset for comment delimiting
--- lines. For example, offsetting 1 line would function with this format:
---
--- `# injected_lang
--- `''
--- `	injected content
--- `'';
---
--- Offsetting 0 lines would function with this format:
---
--- `# injected_lang
--- `''injected content
--- `more injected content
--- `end content'';
---
---@field register? string - Register to use to copy injected content.
---@field suppress_warnings? boolean - Suppress warnings.
--- NOTE: If ninjection is not functioning properly, ensure this is false for
--- debugging.
---
---@field editor_style? EditorStyle
--- Window style to use for the injected context editor.
---
---@field inj_lang_queries? table<string,string> - Contains per-language string
--- literals for Treesitter queries to Identify injected content nodes.
---
---@field inj_lang_query? string This is configured by referencing `file_lang`
--- in the table of `inj_lang_queries`. This cannot be nil.
---
---@field lsp_map? table<string,string> - LSP associated with the injected
--- languages These keys must match the language comment used to identify
--- injected languages, and the value must match the LSP configured in your
--- lspconfig.
---
---@tag NJRange
---@class NJRange
---@brief Store cursor position coordinates.
---
---@field s_row integer
---@field s_col integer
---@field e_row integer
---@field e_col integer
---
---@tag NJNodeTable
---@class NJNodeTable
---@brief Store a Treesitter node and its associated coordinates.
---
---@field node TSNode
---@field range NJRange
---
---@tag NJIndents
---@class NJIndents
---@brief Store indents for a text buffer.
---
---@field t_indent number
---@field b_indent number
---@field l_indent number
---
---@tag NJParent
---@brief Store associated child bufnrs.
---@class NJParent
---@field children integer[]
---
---@tag NJChild
---@class NJChild
---@brief Store associated parent buffer information.
---
---@field bufnr integer
---@field root_dir string
---@field p_bufnr integer
---@field p_indents NJIndents
---@field p_range NJRange
---
---@tag NJLspStatus
---@class NJLspStatus
---@brief Store LSP status and associated client ID.
---
---@field status string - The LSP startup status. Possible values: `"unmapped"`,
--- `"unconfigured"`, `"unavailable"`, `"no-exec"`, `"unsupported"`, `"failed_start"`,
--- `"started"`
---
---@field client_id integer - The client ID of the started LSP, -1 on failure
---
---@tag lspconfig.Config
---@class lspconfig.Config : vim.lsp.ClientConfig
---@brief Annotation for lspconfig from `nvim-lspconfig/lua/lspconfig/configs.lua`
---
---@field enabled? boolean
---@field single_file_support? boolean
---@field silent? boolean
---@field filetypes? string[]
---@field filetype? string
---@field on_new_config? fun(new_config: lspconfig.Config?, new_root_dir: string)
---@field autostart? boolean
---@field package _on_attach? fun(client: vim.lsp.Client, bufnr: integer)
---@field root_dir? string|fun(filename: string, bufnr: number)
---@field commands? table<string, lspconfig.Config.command>
