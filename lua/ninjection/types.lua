---@module "ninjection.types"
---@brief
--- The types module contains all ninjection specific type definitions.
---

---@meta
---@tag EditorStyle
---@alias EditorStyle "cur_win" | "floating" | "v_split" | "h_split"
---@brief
--- Supported window styles for buffer editor:
--- `"cur_win" | "floating" | "v_split" | "h_split"`
---
---@alias lspconfig.Config.command {[1]:string|vim.api.keyset.user_command}
---@brief
--- Modified from `nvim-lspconfig/lua/lspconfig/configs.lua` because I can't
--- find a reference to: `vim.api.keyset.create_user_command.command_args`
---
---@tag Ninjection.Subcommand
---@class Ninjection.Subcommand
---@brief Implemented by `plugin/ninjection.lua` for user commands.
---
---@field impl fun()
---@field complete? fun(arg_lead: string): string[]
---
---@tag Ninjection.CmdOpts
---@class Ninjection.CmdOpts
---@brief Implemented by `plugin/ninjection.lua` for user commands.
---
---@field args string - The entire argument string as typed.
---@field fargs string[] - Command arguments as an array of strings.
---@field bang? boolean - Bang (!) flag.
---@field line1? number - Starting line number for optional range.
---@field line2? number - Ending line number for optional range.
---@field count? number - Optional count.
---
---@tag Ninjection.Config
---@class Ninjection.Config
---@brief Implemented by `ninjection/config.lua` for default and user configs.
---
---@field preserve_indents? boolean - Preserve indents from the parent buffer.
--- This option should be used in conjunction with `auto_format` because this
--- will re-apply indents that `auto_format` normally removes. If you don't remove
--- indents, then enabling this will increas the original indenation.
---
---@field auto_format? boolean - Auto format the new child buffer.
---@field format_cmd? string - Command for `auto_format`.
---@field format_indent? integer - Additional spaces to indent injected text blocks.
---@field register? string - Register to use to copy injected content.
---@field debug? boolean - Output debug messages.
---
---@field editor_style? EditorStyle
--- Window style to use for the injected context editor.
---
---@field win_config? vim.api.keyset.win_config
--- Window configuration parameters.
---
---@field inj_lang_queries? table<string,string> - Contains per-language string
--- literals for Treesitter queries to Identify injected content nodes.
---
---@field inj_lang_comment_pattern? table<string,string> - Contains pattern to strip
--- injected language comment to derive the language. Defaults to # lang style
--- comments for Nix.
---
---@field inj_text_modifiers? table<string, fun(text: string): string, table> - Contains
--- per-language functions to modify text returned by the lang query
---
---@field inj_text_restorers? table<string, fun(text: string, meta: table): string[]> - Contains
--- per-language functions to restore modified text
---
---@field inj_lang_tweaks? table<string, NJLangTweak> - Contains
--- language functions to workaround limitations in Treesitter queries and post-process
--- injected content selections.
---
---@field lsp_map? table<string,string> - LSP associated with the injected
--- languages These keys must match the language comment used to identify
--- injected languages, and the value must match the LSP configured in your
--- lspconfig.
---
---@tag NJRange
---@class NJRange
---@brief Store cursor position coordinates.
---
---@field s_row integer
---@field s_col integer
---@field e_row integer
---@field e_col integer
---
---@tag NJCapturePair
---@class NJCapturePair
---@brief Store a language string and its associated node.
---
---@field inj_lang string Language tag extracted from inj_lang capture
---@field node TSNode Node associated with the injected code
---
---@tag NJLangTweak
---@class NJLangTweak
---@brief Language specific adjustments for tweaking parsing and buffers.
---
---@field parse_range_offset NJRange
---@field buffer_cursor_offset NJRange
---
---@tag NJNodeTable
---@class NJNodeTable
---@brief Store an injected language capture pair, its range, its text, and the
--- cursor position.
---
---@field ft string Filetype of the buffer containing the injection
---@field pair NJCapturePair Injected code node and its language tag
---@field range NJRange Range of the injected code node
---@field text string Injected text
---@field text_meta? table<string, boolean> Language specific text modififications
---@field cursor_pos integer[] Cursor position during table creation
---
---@tag NJIndents
---@class NJIndents
---@brief Store indents for a text buffer.
---
---@field t_indent number
---@field b_indent number
---@field l_indent number
---@field tab_indent number
---
---@tag NJParent
---@brief Store associated child bufnrs.
---@class NJParent
---@field children integer[]
---
---@tag NJChild
---@class NJChild
---@brief Store associated parent buffer information
---
---@field ft string Filetype in use for the child
---@field root_dir string Root directory associated with the child
---@field p_bufnr integer Parent bufnr the child belongs to
---@field p_ft string Parent filetype
---@field p_name string Parent buffer name
---@field p_range NJRange Parent text range the child is created from
---@field p_text_meta? table<string, boolean> Metadata for language specific
--- text modifications
---@field p_indents? NJIndents Parent indents if preserved
---
---@tag NJLspStatus
---@class NJLspStatus
---@brief Store LSP status and associated client ID.
---
---@field status string - The LSP startup status. Possible values: `"unmapped"`,
--- `"unconfigured"`, `"unavailable"`, `"no-exec"`, `"unsupported"`, `"failed_start"`,
--- `"started"`
---
---@field client_id integer - The client ID of the started LSP, -1 on failure
---
---@tag lspconfig.Config
---@class lspconfig.Config : vim.lsp.ClientConfig
---@brief Annotation for lspconfig from `nvim-lspconfig/lua/lspconfig/configs.lua`
---
---@field enabled? boolean
---@field single_file_support? boolean
---@field silent? boolean
---@field filetypes? string[]
---@field filetype? string
---@field on_new_config? fun(new_config: lspconfig.Config?, new_root_dir: string)
---@field autostart? boolean
---@field package _on_attach? fun(client: vim.lsp.Client, bufnr: integer)
---@field root_dir? string|fun(filename: string, bufnr: number)
---@field commands? table<string, lspconfig.Config.command>
